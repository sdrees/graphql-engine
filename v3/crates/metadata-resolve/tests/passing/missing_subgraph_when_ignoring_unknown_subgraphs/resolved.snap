---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/missing_subgraph_when_ignoring_unknown_subgraphs/metadata.json
---
Metadata {
    object_types: {
        Qualified {
            subgraph: "article_namespace",
            name: CustomTypeName(
                Identifier(
                    "article",
                ),
            ),
        }: ObjectTypeWithRelationships {
            object_type: ObjectTypeRepresentation {
                fields: {
                    FieldName(
                        Identifier(
                            "article_id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "title",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "author_id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [
                    FieldName(
                        Identifier(
                            "article_id",
                        ),
                    ),
                ],
                apollo_federation_config: None,
                graphql_output_type_name: Some(
                    TypeName(
                        Name(
                            "Article",
                        ),
                    ),
                ),
                graphql_input_type_name: None,
                description: None,
            },
            type_output_permissions: {
                Role(
                    "admin",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "article_id",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                    },
                },
                Role(
                    "user1",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                    },
                },
                Role(
                    "user2",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                    },
                },
            },
            type_input_permissions: {},
            relationship_fields: {},
            type_mappings: DataConnectorTypeMappingsForObject(
                {
                    Qualified {
                        subgraph: "article_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "db",
                            ),
                        ),
                    }: {
                        DataConnectorObjectType(
                            "article",
                        ): Object {
                            ndc_object_type_name: DataConnectorObjectType(
                                "article",
                            ),
                            field_mappings: {
                                FieldName(
                                    Identifier(
                                        "article_id",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "id",
                                    ),
                                    column_type: Named {
                                        name: "int4",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "author_id",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "author_id",
                                    ),
                                    column_type: Named {
                                        name: "int4",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "title",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "title",
                                    ),
                                    column_type: Named {
                                        name: "varchar",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
    scalar_types: {},
    models: {
        Qualified {
            subgraph: "article_namespace",
            name: ModelName(
                Identifier(
                    "Articles",
                ),
            ),
        }: ModelWithPermissions {
            model: Model {
                name: Qualified {
                    subgraph: "article_namespace",
                    name: ModelName(
                        Identifier(
                            "Articles",
                        ),
                    ),
                },
                data_type: Qualified {
                    subgraph: "article_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "article",
                        ),
                    ),
                },
                type_fields: {
                    FieldName(
                        Identifier(
                            "article_id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "title",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "author_id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [
                    FieldName(
                        Identifier(
                            "article_id",
                        ),
                    ),
                ],
                arguments: {},
                source: Some(
                    ModelSource {
                        data_connector: DataConnectorLink {
                            name: Qualified {
                                subgraph: "article_namespace",
                                name: DataConnectorName(
                                    Identifier(
                                        "db",
                                    ),
                                ),
                            },
                            url: SingleUrl(
                                SerializableUrl(
                                    Url {
                                        scheme: "http",
                                        cannot_be_a_base: false,
                                        username: "",
                                        password: None,
                                        host: Some(
                                            Domain(
                                                "postgres_connector",
                                            ),
                                        ),
                                        port: Some(
                                            8080,
                                        ),
                                        path: "/",
                                        query: None,
                                        fragment: None,
                                    },
                                ),
                            ),
                            headers: SerializableHeaderMap(
                                {},
                            ),
                            argument_presets: [],
                            response_config: None,
                            capabilities: DataConnectorCapabilities {
                                supports_explaining_queries: true,
                                supports_explaining_mutations: false,
                                supports_nested_object_filtering: true,
                                supports_nested_object_aggregations: false,
                            },
                        },
                        collection: "article",
                        collection_type: DataConnectorObjectType(
                            "article",
                        ),
                        type_mappings: {
                            Qualified {
                                subgraph: "article_namespace",
                                name: CustomTypeName(
                                    Identifier(
                                        "article",
                                    ),
                                ),
                            }: Object {
                                ndc_object_type_name: DataConnectorObjectType(
                                    "article",
                                ),
                                field_mappings: {
                                    FieldName(
                                        Identifier(
                                            "article_id",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "id",
                                        ),
                                        column_type: Named {
                                            name: "int4",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "author_id",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "author_id",
                                        ),
                                        column_type: Named {
                                            name: "int4",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "title",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "title",
                                        ),
                                        column_type: Named {
                                            name: "varchar",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                },
                            },
                        },
                        argument_mappings: {},
                        source_arguments: {},
                    },
                ),
                global_id_source: Some(
                    NDCFieldSourceMapping {
                        ndc_mapping: {
                            FieldName(
                                Identifier(
                                    "article_id",
                                ),
                            ): NdcColumnForComparison {
                                column: DataConnectorColumnName(
                                    "id",
                                ),
                                equal_operator: "_eq",
                            },
                        },
                    },
                ),
                apollo_federation_key_source: None,
                orderable_fields: [
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "article_id",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                ],
                aggregate_expression: None,
                raw: ModelRaw {
                    filter_expression_type: None,
                    graphql: Some(
                        ModelGraphQlDefinition {
                            select_uniques: [],
                            select_many: Some(
                                SelectManyGraphQlDefinition {
                                    query_root_field: GraphQlFieldName(
                                        "Articles",
                                    ),
                                    description: None,
                                    deprecated: None,
                                },
                            ),
                            arguments_input_type: None,
                            order_by_expression_type: None,
                            apollo_federation: None,
                            filter_input_type_name: None,
                            aggregate: None,
                        },
                    ),
                    description: None,
                },
            },
            select_permissions: {
                Role(
                    "admin",
                ): SelectPermission {
                    filter: AllowAll,
                    argument_presets: {},
                },
                Role(
                    "user1",
                ): SelectPermission {
                    filter: Filter(
                        BinaryFieldComparison {
                            field: FieldName(
                                Identifier(
                                    "author_id",
                                ),
                            ),
                            field_parent_type: Qualified {
                                subgraph: "article_namespace",
                                name: CustomTypeName(
                                    Identifier(
                                        "article",
                                    ),
                                ),
                            },
                            ndc_column: DataConnectorColumnName(
                                "author_id",
                            ),
                            operator: DataConnectorOperatorName(
                                "_eq",
                            ),
                            argument_type: QualifiedTypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        Int,
                                    ),
                                ),
                                nullable: false,
                            },
                            value: SessionVariable(
                                SessionVariable(
                                    "x-hasura-user-id",
                                ),
                            ),
                        },
                    ),
                    argument_presets: {},
                },
                Role(
                    "user2",
                ): SelectPermission {
                    filter: AllowAll,
                    argument_presets: {},
                },
            },
            filter_expression_type: None,
            graphql_api: ModelGraphQlApi {
                arguments_input_config: None,
                select_uniques: [],
                select_many: Some(
                    SelectManyGraphQlDefinition {
                        query_root_field: Name(
                            "Articles",
                        ),
                        description: None,
                        deprecated: None,
                    },
                ),
                select_aggregate: None,
                order_by_expression: None,
                limit_field: Some(
                    LimitFieldGraphqlConfig {
                        field_name: Name(
                            "limit",
                        ),
                    },
                ),
                offset_field: Some(
                    OffsetFieldGraphqlConfig {
                        field_name: Name(
                            "offset",
                        ),
                    },
                ),
                filter_input_type_name: None,
            },
        },
    },
    commands: {},
    object_boolean_expression_types: {},
    boolean_expression_types: BooleanExpressionTypes {
        objects: {},
        scalars: {},
    },
    aggregate_expressions: {},
    graphql_config: GlobalGraphqlConfig {
        query_root_type_name: TypeName(
            Name(
                "Query",
            ),
        ),
        mutation_root_type_name: TypeName(
            Name(
                "Mutation",
            ),
        ),
        order_by_input: Some(
            OrderByInputGraphqlConfig {
                asc_direction_field_value: Name(
                    "Asc",
                ),
                desc_direction_field_value: Name(
                    "Desc",
                ),
                enum_type_name: TypeName(
                    Name(
                        "order_by",
                    ),
                ),
            },
        ),
        enable_apollo_federation_fields: false,
    },
    roles: [
        Role(
            "admin",
        ),
        Role(
            "user1",
        ),
        Role(
            "user2",
        ),
        Role(
            "admin",
        ),
        Role(
            "user1",
        ),
        Role(
            "user2",
        ),
    ],
}
