---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/boolean_expression_type/two_data_sources/metadata.json
---
Metadata {
    object_types: {
        Qualified {
            subgraph: "__unknown_namespace",
            name: CustomTypeName(
                Identifier(
                    "author",
                ),
            ),
        }: ObjectTypeWithRelationships {
            object_type: ObjectTypeRepresentation {
                fields: {
                    FieldName(
                        Identifier(
                            "author_id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "first_name",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "last_name",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [],
                apollo_federation_config: None,
                graphql_output_type_name: Some(
                    TypeName(
                        Name(
                            "Author",
                        ),
                    ),
                ),
                graphql_input_type_name: None,
                description: None,
            },
            type_output_permissions: {
                Role(
                    "admin",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "first_name",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "last_name",
                            ),
                        ),
                    },
                },
                Role(
                    "user_1",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "author_id",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "first_name",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "last_name",
                            ),
                        ),
                    },
                },
            },
            type_input_permissions: {},
            relationship_fields: {},
            type_mappings: DataConnectorTypeMappingsForObject(
                {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "postgres_db",
                            ),
                        ),
                    }: {
                        DataConnectorObjectType(
                            "author",
                        ): Object {
                            ndc_object_type_name: DataConnectorObjectType(
                                "author",
                            ),
                            field_mappings: {
                                FieldName(
                                    Identifier(
                                        "author_id",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "id",
                                    ),
                                    column_type: Named {
                                        name: "int4",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "first_name",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "first_name",
                                    ),
                                    column_type: Named {
                                        name: "String",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "last_name",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "last_name",
                                    ),
                                    column_type: Named {
                                        name: "String",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
    scalar_types: {},
    models: {},
    commands: {},
    object_boolean_expression_types: {},
    boolean_expression_types: BooleanExpressionTypes {
        objects: {
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "author_bool_exp",
                    ),
                ),
            }: ResolvedObjectBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "author_bool_exp",
                        ),
                    ),
                },
                object_type: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "author",
                        ),
                    ),
                },
                graphql: None,
                include_logical_operators: Yes,
            },
        },
        scalars: {
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "postgres_int_comparison_bool_exp",
                    ),
                ),
            }: ResolvedScalarBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "postgres_int_comparison_bool_exp",
                        ),
                    ),
                },
                representation: Inbuilt(
                    Int,
                ),
                comparison_operators: {
                    OperatorName(
                        "_in",
                    ): TypeReference {
                        underlying_type: List(
                            TypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        Int,
                                    ),
                                ),
                                nullable: false,
                            },
                        ),
                        nullable: false,
                    },
                    OperatorName(
                        "equals",
                    ): TypeReference {
                        underlying_type: Named(
                            Inbuilt(
                                Int,
                            ),
                        ),
                        nullable: false,
                    },
                },
                data_connector_operator_mappings: {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "postgres_db",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "postgres_db",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "int8",
                        ),
                        operator_mapping: {
                            OperatorName(
                                "equals",
                            ): DataConnectorOperatorName(
                                "_eq",
                            ),
                        },
                    },
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "postgres_db_2",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "postgres_db_2",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "int8",
                        ),
                        operator_mapping: {
                            OperatorName(
                                "equals",
                            ): DataConnectorOperatorName(
                                "_eq",
                            ),
                        },
                    },
                },
                graphql_name: None,
                include_is_null: Yes,
            },
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "postgres_string_comparison_bool_exp",
                    ),
                ),
            }: ResolvedScalarBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "postgres_string_comparison_bool_exp",
                        ),
                    ),
                },
                representation: Inbuilt(
                    String,
                ),
                comparison_operators: {
                    OperatorName(
                        "_in",
                    ): TypeReference {
                        underlying_type: List(
                            TypeReference {
                                underlying_type: Named(
                                    Inbuilt(
                                        String,
                                    ),
                                ),
                                nullable: false,
                            },
                        ),
                        nullable: false,
                    },
                    OperatorName(
                        "equals",
                    ): TypeReference {
                        underlying_type: Named(
                            Inbuilt(
                                String,
                            ),
                        ),
                        nullable: false,
                    },
                },
                data_connector_operator_mappings: {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "postgres_db",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "postgres_db",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "String",
                        ),
                        operator_mapping: {
                            OperatorName(
                                "equals",
                            ): DataConnectorOperatorName(
                                "_eq",
                            ),
                        },
                    },
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "postgres_db_2",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "postgres_db_2",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "String",
                        ),
                        operator_mapping: {
                            OperatorName(
                                "equals",
                            ): DataConnectorOperatorName(
                                "_eq",
                            ),
                        },
                    },
                },
                graphql_name: None,
                include_is_null: Yes,
            },
        },
    },
    aggregate_expressions: {},
    graphql_config: GlobalGraphqlConfig {
        query_root_type_name: TypeName(
            Name(
                "Query",
            ),
        ),
        mutation_root_type_name: TypeName(
            Name(
                "Mutation",
            ),
        ),
        order_by_input: Some(
            OrderByInputGraphqlConfig {
                asc_direction_field_value: Name(
                    "Asc",
                ),
                desc_direction_field_value: Name(
                    "Desc",
                ),
                enum_type_name: TypeName(
                    Name(
                        "order_by",
                    ),
                ),
            },
        ),
        enable_apollo_federation_fields: false,
    },
    roles: [
        Role(
            "admin",
        ),
        Role(
            "user_1",
        ),
    ],
}
