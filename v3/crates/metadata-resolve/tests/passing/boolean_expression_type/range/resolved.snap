---
source: crates/metadata-resolve/tests/metadata_golden_tests.rs
expression: resolved
input_file: crates/metadata-resolve/tests/passing/boolean_expression_type/range/metadata.json
---
Metadata {
    object_types: {
        Qualified {
            subgraph: "__unknown_namespace",
            name: CustomTypeName(
                Identifier(
                    "int_range",
                ),
            ),
        }: ObjectTypeWithRelationships {
            object_type: ObjectTypeRepresentation {
                fields: {
                    FieldName(
                        Identifier(
                            "start",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "end",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [],
                apollo_federation_config: None,
                graphql_output_type_name: Some(
                    TypeName(
                        Name(
                            "IntRange",
                        ),
                    ),
                ),
                graphql_input_type_name: None,
                description: None,
            },
            type_output_permissions: {},
            type_input_permissions: {},
            relationship_fields: {},
            type_mappings: DataConnectorTypeMappingsForObject(
                {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                    }: {
                        DataConnectorObjectType(
                            "int_range",
                        ): Object {
                            ndc_object_type_name: DataConnectorObjectType(
                                "int_range",
                            ),
                            field_mappings: {
                                FieldName(
                                    Identifier(
                                        "end",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "lte",
                                    ),
                                    column_type: Named {
                                        name: "Int",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "start",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "gte",
                                    ),
                                    column_type: Named {
                                        name: "Int",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                            },
                        },
                    },
                },
            ),
        },
        Qualified {
            subgraph: "__unknown_namespace",
            name: CustomTypeName(
                Identifier(
                    "movie",
                ),
            ),
        }: ObjectTypeWithRelationships {
            object_type: ObjectTypeRepresentation {
                fields: {
                    FieldName(
                        Identifier(
                            "id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "title",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "rating",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [],
                apollo_federation_config: None,
                graphql_output_type_name: Some(
                    TypeName(
                        Name(
                            "Movie",
                        ),
                    ),
                ),
                graphql_input_type_name: None,
                description: None,
            },
            type_output_permissions: {
                Role(
                    "admin",
                ): TypeOutputPermission {
                    allowed_fields: {
                        FieldName(
                            Identifier(
                                "id",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        FieldName(
                            Identifier(
                                "rating",
                            ),
                        ),
                    },
                },
            },
            type_input_permissions: {},
            relationship_fields: {},
            type_mappings: DataConnectorTypeMappingsForObject(
                {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                    }: {
                        DataConnectorObjectType(
                            "movie",
                        ): Object {
                            ndc_object_type_name: DataConnectorObjectType(
                                "movie",
                            ),
                            field_mappings: {
                                FieldName(
                                    Identifier(
                                        "id",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "id",
                                    ),
                                    column_type: Named {
                                        name: "Int",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "rating",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "rating",
                                    ),
                                    column_type: Named {
                                        name: "Int",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                                FieldName(
                                    Identifier(
                                        "title",
                                    ),
                                ): FieldMapping {
                                    column: DataConnectorColumnName(
                                        "title",
                                    ),
                                    column_type: Named {
                                        name: "String",
                                    },
                                    column_type_representation: None,
                                    argument_mappings: {},
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
    scalar_types: {},
    models: {
        Qualified {
            subgraph: "__unknown_namespace",
            name: ModelName(
                Identifier(
                    "movies",
                ),
            ),
        }: ModelWithPermissions {
            model: Model {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: ModelName(
                        Identifier(
                            "movies",
                        ),
                    ),
                },
                data_type: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "movie",
                        ),
                    ),
                },
                type_fields: {
                    FieldName(
                        Identifier(
                            "id",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "title",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    String,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                    FieldName(
                        Identifier(
                            "rating",
                        ),
                    ): FieldDefinition {
                        field_type: QualifiedTypeReference {
                            underlying_type: Named(
                                Inbuilt(
                                    Int,
                                ),
                            ),
                            nullable: false,
                        },
                        description: None,
                        deprecated: None,
                        field_arguments: {},
                    },
                },
                global_id_fields: [],
                arguments: {},
                source: Some(
                    ModelSource {
                        data_connector: DataConnectorLink {
                            name: Qualified {
                                subgraph: "__unknown_namespace",
                                name: DataConnectorName(
                                    Identifier(
                                        "custom",
                                    ),
                                ),
                            },
                            url: SingleUrl(
                                SerializableUrl(
                                    Url {
                                        scheme: "http",
                                        cannot_be_a_base: false,
                                        username: "",
                                        password: None,
                                        host: Some(
                                            Domain(
                                                "custom_connector",
                                            ),
                                        ),
                                        port: Some(
                                            8101,
                                        ),
                                        path: "/",
                                        query: None,
                                        fragment: None,
                                    },
                                ),
                            ),
                            headers: SerializableHeaderMap(
                                {},
                            ),
                            argument_presets: [],
                            response_config: None,
                            capabilities: DataConnectorCapabilities {
                                supports_explaining_queries: true,
                                supports_explaining_mutations: false,
                                supports_nested_object_filtering: true,
                                supports_nested_object_aggregations: false,
                            },
                        },
                        collection: "movies",
                        collection_type: DataConnectorObjectType(
                            "movie",
                        ),
                        type_mappings: {
                            Qualified {
                                subgraph: "__unknown_namespace",
                                name: CustomTypeName(
                                    Identifier(
                                        "movie",
                                    ),
                                ),
                            }: Object {
                                ndc_object_type_name: DataConnectorObjectType(
                                    "movie",
                                ),
                                field_mappings: {
                                    FieldName(
                                        Identifier(
                                            "id",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "id",
                                        ),
                                        column_type: Named {
                                            name: "Int",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "rating",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "rating",
                                        ),
                                        column_type: Named {
                                            name: "Int",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                    FieldName(
                                        Identifier(
                                            "title",
                                        ),
                                    ): FieldMapping {
                                        column: DataConnectorColumnName(
                                            "title",
                                        ),
                                        column_type: Named {
                                            name: "String",
                                        },
                                        column_type_representation: None,
                                        argument_mappings: {},
                                    },
                                },
                            },
                        },
                        argument_mappings: {},
                        source_arguments: {},
                    },
                ),
                global_id_source: None,
                apollo_federation_key_source: None,
                orderable_fields: [
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "id",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "title",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                    OrderableField {
                        field_name: FieldName(
                            Identifier(
                                "rating",
                            ),
                        ),
                        order_by_directions: EnableAll(
                            true,
                        ),
                    },
                ],
                aggregate_expression: None,
                raw: ModelRaw {
                    filter_expression_type: None,
                    graphql: Some(
                        ModelGraphQlDefinition {
                            select_uniques: [],
                            select_many: Some(
                                SelectManyGraphQlDefinition {
                                    query_root_field: GraphQlFieldName(
                                        "MovieMany",
                                    ),
                                    description: None,
                                    deprecated: None,
                                },
                            ),
                            arguments_input_type: None,
                            order_by_expression_type: None,
                            apollo_federation: None,
                            filter_input_type_name: None,
                            aggregate: None,
                        },
                    ),
                    description: None,
                },
            },
            select_permissions: {
                Role(
                    "admin",
                ): SelectPermission {
                    filter: AllowAll,
                    argument_presets: {},
                },
            },
            filter_expression_type: None,
            graphql_api: ModelGraphQlApi {
                arguments_input_config: None,
                select_uniques: [],
                select_many: Some(
                    SelectManyGraphQlDefinition {
                        query_root_field: Name(
                            "MovieMany",
                        ),
                        description: None,
                        deprecated: None,
                    },
                ),
                select_aggregate: None,
                order_by_expression: None,
                limit_field: Some(
                    LimitFieldGraphqlConfig {
                        field_name: Name(
                            "limit",
                        ),
                    },
                ),
                offset_field: Some(
                    OffsetFieldGraphqlConfig {
                        field_name: Name(
                            "offset",
                        ),
                    },
                ),
                filter_input_type_name: None,
            },
        },
    },
    commands: {},
    object_boolean_expression_types: {},
    boolean_expression_types: BooleanExpressionTypes {
        objects: {
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "movie_bool_exp",
                    ),
                ),
            }: ResolvedObjectBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "movie_bool_exp",
                        ),
                    ),
                },
                object_type: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "movie",
                        ),
                    ),
                },
                graphql: Some(
                    BooleanExpressionGraphqlConfig {
                        type_name: TypeName(
                            Name(
                                "InstitutionBoolExp",
                            ),
                        ),
                        object_fields: {},
                        scalar_fields: {
                            FieldName(
                                Identifier(
                                    "rating",
                                ),
                            ): ComparisonExpressionInfo {
                                object_type_name: Some(
                                    Qualified {
                                        subgraph: "__unknown_namespace",
                                        name: CustomTypeName(
                                            Identifier(
                                                "int_range_bool_exp",
                                            ),
                                        ),
                                    },
                                ),
                                type_name: TypeName(
                                    Name(
                                        "Int_Comparison_Exp",
                                    ),
                                ),
                                operators: {
                                    OperatorName(
                                        "within",
                                    ): QualifiedTypeReference {
                                        underlying_type: Named(
                                            Custom(
                                                Qualified {
                                                    subgraph: "__unknown_namespace",
                                                    name: CustomTypeName(
                                                        Identifier(
                                                            "int_range",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                        nullable: true,
                                    },
                                },
                                operator_mapping: {
                                    Qualified {
                                        subgraph: "__unknown_namespace",
                                        name: DataConnectorName(
                                            Identifier(
                                                "custom",
                                            ),
                                        ),
                                    }: {
                                        OperatorName(
                                            "within",
                                        ): DataConnectorOperatorName(
                                            "range",
                                        ),
                                    },
                                },
                                is_null_operator_name: Some(
                                    Name(
                                        "_is_null",
                                    ),
                                ),
                            },
                            FieldName(
                                Identifier(
                                    "title",
                                ),
                            ): ComparisonExpressionInfo {
                                object_type_name: Some(
                                    Qualified {
                                        subgraph: "__unknown_namespace",
                                        name: CustomTypeName(
                                            Identifier(
                                                "string_bool_exp",
                                            ),
                                        ),
                                    },
                                ),
                                type_name: TypeName(
                                    Name(
                                        "String_Comparison_Exp",
                                    ),
                                ),
                                operators: {},
                                operator_mapping: {
                                    Qualified {
                                        subgraph: "__unknown_namespace",
                                        name: DataConnectorName(
                                            Identifier(
                                                "custom",
                                            ),
                                        ),
                                    }: {},
                                },
                                is_null_operator_name: Some(
                                    Name(
                                        "_is_null",
                                    ),
                                ),
                            },
                        },
                        relationship_fields: {},
                        graphql_config: BooleanExpressionGraphqlFieldConfig {
                            where_field_name: Name(
                                "where",
                            ),
                            and_operator_name: Name(
                                "_and",
                            ),
                            or_operator_name: Name(
                                "_or",
                            ),
                            not_operator_name: Name(
                                "_not",
                            ),
                        },
                    },
                ),
                include_logical_operators: Yes,
            },
        },
        scalars: {
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "int_bool_exp",
                    ),
                ),
            }: ResolvedScalarBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "int_bool_exp",
                        ),
                    ),
                },
                representation: Inbuilt(
                    Int,
                ),
                comparison_operators: {},
                data_connector_operator_mappings: {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "Int",
                        ),
                        operator_mapping: {},
                    },
                },
                graphql_name: None,
                include_is_null: Yes,
            },
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "int_range_bool_exp",
                    ),
                ),
            }: ResolvedScalarBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "int_range_bool_exp",
                        ),
                    ),
                },
                representation: Inbuilt(
                    Int,
                ),
                comparison_operators: {
                    OperatorName(
                        "within",
                    ): TypeReference {
                        underlying_type: Named(
                            Custom(
                                CustomTypeName(
                                    Identifier(
                                        "int_range",
                                    ),
                                ),
                            ),
                        ),
                        nullable: true,
                    },
                },
                data_connector_operator_mappings: {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "Int",
                        ),
                        operator_mapping: {
                            OperatorName(
                                "within",
                            ): DataConnectorOperatorName(
                                "range",
                            ),
                        },
                    },
                },
                graphql_name: Some(
                    GraphQlTypeName(
                        "Int_Comparison_Exp",
                    ),
                ),
                include_is_null: Yes,
            },
            Qualified {
                subgraph: "__unknown_namespace",
                name: CustomTypeName(
                    Identifier(
                        "string_bool_exp",
                    ),
                ),
            }: ResolvedScalarBooleanExpressionType {
                name: Qualified {
                    subgraph: "__unknown_namespace",
                    name: CustomTypeName(
                        Identifier(
                            "string_bool_exp",
                        ),
                    ),
                },
                representation: Inbuilt(
                    String,
                ),
                comparison_operators: {},
                data_connector_operator_mappings: {
                    Qualified {
                        subgraph: "__unknown_namespace",
                        name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                    }: DataConnectorOperatorMapping {
                        data_connector_name: DataConnectorName(
                            Identifier(
                                "custom",
                            ),
                        ),
                        data_connector_scalar_type: DataConnectorScalarType(
                            "String",
                        ),
                        operator_mapping: {},
                    },
                },
                graphql_name: Some(
                    GraphQlTypeName(
                        "String_Comparison_Exp",
                    ),
                ),
                include_is_null: Yes,
            },
        },
    },
    aggregate_expressions: {},
    graphql_config: GlobalGraphqlConfig {
        query_root_type_name: TypeName(
            Name(
                "Query",
            ),
        ),
        mutation_root_type_name: TypeName(
            Name(
                "Mutation",
            ),
        ),
        order_by_input: Some(
            OrderByInputGraphqlConfig {
                asc_direction_field_value: Name(
                    "Asc",
                ),
                desc_direction_field_value: Name(
                    "Desc",
                ),
                enum_type_name: TypeName(
                    Name(
                        "order_by",
                    ),
                ),
            },
        ),
        enable_apollo_federation_fields: false,
    },
    roles: [
        Role(
            "admin",
        ),
        Role(
            "admin",
        ),
    ],
}
